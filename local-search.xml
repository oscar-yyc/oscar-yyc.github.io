<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>软件测试学习 - 测试基础</title>
    <link href="/articles/softwaretesting-fundamentals/"/>
    <url>/articles/softwaretesting-fundamentals/</url>
    
    <content type="html"><![CDATA[<blockquote><p>此阶段学习完成后应具备的能力：</p><ul><li>知道测试的主要工作内容</li><li>能够掌握常用用例设计方法及应用场景</li><li>能够使用缺陷管理工具对缺陷进行管理</li><li>能够对 web 项目功能进行实战</li></ul></blockquote><span id="more"></span><h2 id="软件测试"><a href="#软件测试" class="headerlink" title="软件测试"></a>软件测试</h2><ul><li><p>定义：使用技术手段验证软件是否满足需求</p></li><li><p>目的：用最少的人力、物力、财力，找到软件中的问题并修复，从而降低商业风险</p></li></ul><h2 id="测试主流技能"><a href="#测试主流技能" class="headerlink" title="测试主流技能"></a>测试主流技能</h2><ul><li>功能测试（手工测试）：主要验证程序的功能是否符合需求</li><li>自动化测试：使用代码或工具代替人工验证项目功能</li><li>接口测试：针对模块与模块或系统与系统之间数据请求地址进行测试</li><li>性能测试：模拟多人使用软件，查找服务器缺陷</li></ul><h2 id="测试常用分类"><a href="#测试常用分类" class="headerlink" title="测试常用分类"></a>测试常用分类</h2><h3 id="按测试阶段划分"><a href="#按测试阶段划分" class="headerlink" title="按测试阶段划分"></a>按测试阶段划分</h3><ul><li>单元测试：又称白盒测试，针对程序源代码进行测试（开发）</li><li>集成测试：又称接口测试，主要针对模块与模块或系统与系统之间的接口进行验证</li><li>系统测试：针对软件全面进行验证（功能、兼容、文档）</li><li>验收测试：使用内侧、公测来实现<ul><li>内侧：公司内部进行测试</li><li>公测：让玩家来进行测试</li></ul></li></ul><h3 id="按代码可见度划分"><a href="#按代码可见度划分" class="headerlink" title="按代码可见度划分"></a>按代码可见度划分</h3><ul><li>黑盒测试：又称功能测试，看不见源代码，主要对程序功能进行测试    </li><li>灰盒测试：又称接口测试，可以看见部分代码，主要对程序接口进行测试</li><li>白盒测试：又称单元测试，可以看见全部代码，主要对程序源代码进行测试</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>系统测试和黑盒测试重点核心是功能测试</li><li>集成测试和灰盒测试又称接口测试</li><li>单元测试和白盒测试是对代码进行测试</li><li>自动化测试归属功能测试</li><li>性能测试、安全测试归属于专项测试</li></ul><h3 id="扩展-测试策略"><a href="#扩展-测试策略" class="headerlink" title="扩展-测试策略"></a>扩展-测试策略</h3><ul><li>冒烟测试：大规模执行测试之前，针对程序主功能进行验证，保证程序具备可测性。</li><li>面试题：提测标准是什么 / 测试之前要怎么做 ？ 冒烟测试通过 </li></ul><h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><h3 id="质量模型"><a href="#质量模型" class="headerlink" title="质量模型"></a>质量模型</h3><blockquote><p>质量模型提供测试设计的<strong>不同角度视野</strong>和验证方向</p><p>学习：针对任何软件或硬件，测试要覆盖的方面</p></blockquote><p><img src="https://gallery.dachunwang.top/img/20211117164045.png"></p><p><img src="https://gallery.dachunwang.top/img/20211117164722.png"></p><blockquote><p>重点关注：功能、兼容、性能、易用、安全</p></blockquote><h3 id="测试模型-W-模型"><a href="#测试模型-W-模型" class="headerlink" title="测试模型 - W 模型"></a>测试模型 - W 模型</h3><blockquote><p> W 模型简称 “双 V “ 模型，即以开发主导的一个 ” V “ 和以测试主导的另一个 ” V “ 构成</p><p>学习：软件开发流程、软件测试在开发流程中的作用</p></blockquote><p><img src="https://gallery.dachunwang.top/img/20211117144555.png"></p><p>开发流程：需求分析、概要设计、详细设计、编码、集成、实施、交付</p><p>测试流程：单元测试、集成测试、系统测试、验收测试</p><ul><li>优点<ul><li>测试伴随整个产品开发周期，测试对象不仅是程序还有需求、设计文档</li><li>测试介入较早，及早发现问题，降低修复成本</li></ul></li></ul><ul><li>缺点<ul><li>实施起来比较复杂，难度大，对于需求阶段和设计阶段的测试设计要求较高</li></ul></li></ul><ul><li>总结<ul><li>测试人员需要项目的功能、性能、兼容、易用、安全、可靠性、移植性来验证被测软件</li><li>重点：功能、性能、兼容、易用、安全</li></ul></li></ul><h2 id="软件测试流程"><a href="#软件测试流程" class="headerlink" title="软件测试流程"></a>软件测试流程</h2><p><img src="https://gallery.dachunwang.top/img/20211117150032.png"></p><ul><li><p>需求分析</p><blockquote><p>前置：阅读需求分析文档，记录不明确之处。</p></blockquote><ul><li>确定各部门对需求理解一致</li><li>站在不同角度对需求进行查漏补缺</li></ul></li></ul><ul><li>计划编写<ul><li>测什么：测试目标及范围</li><li>谁来测：人员进度安排</li><li>怎么测：测试策略、测试工具</li></ul></li></ul><ul><li><p>用例设计</p><blockquote><p>设计执行测试的文档</p></blockquote></li><li><p>用例执行</p><blockquote><p>执行测试的文档</p></blockquote></li></ul><ul><li><p>缺陷管理</p><blockquote><p>提交 -&gt; 验证 -&gt; 关闭</p></blockquote></li></ul><ul><li>测试报告<ul><li>测试目标</li><li>测试工程</li><li>缺陷统计</li><li>缺陷分析</li><li>测试总结</li></ul></li></ul><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><blockquote><p>用例：用户使用的案例</p><p>测试用例：是为测试项目而设计的执行文档</p><p>考虑点：质量模型（功能、性能、兼容、易用、安全）</p></blockquote><h3 id="测试用例的作用"><a href="#测试用例的作用" class="headerlink" title="测试用例的作用"></a>测试用例的作用</h3><ul><li>防止漏测</li><li>实施测试的标准</li></ul><h3 id="用例设计编写格式"><a href="#用例设计编写格式" class="headerlink" title="用例设计编写格式"></a>用例设计编写格式</h3><ul><li>八大要素：<ul><li>用例编号：项目 + 模块 + 编号</li><li>用例标题：预期结果 + 操作步骤</li><li>模块 / 项目：所属项目或模块</li><li>前置条件：要执行此条用例，有哪些前置操作</li><li>优先级：表示用例的重要程度或者影响力 P0 ~ P4 （ P0最高 ）</li><li>测试步骤：描述操作步骤</li><li>测试数据：操作的数据，没有的话可以为空</li><li>预期结果：期望达到的结果</li></ul></li></ul><blockquote><p>示例：</p><p><img src="https://gallery.dachunwang.top/img/20211117155256.png"></p></blockquote><blockquote><p>规范用例标题：预期结果 + 测试点</p><p>用例标题作用：方便评审，方便执行</p><p>验证码测试用例：</p><ul><li>为空</li><li>错误</li><li>过期</li><li>正确</li></ul></blockquote><h3 id="如何设计用例"><a href="#如何设计用例" class="headerlink" title="如何设计用例"></a>如何设计用例</h3><ul><li>不同场景和需求，有不同的用例设计方法，需要学习用例的设计方法。</li></ul><h2 id="知识回顾"><a href="#知识回顾" class="headerlink" title="知识回顾"></a>知识回顾</h2><p><img src="https://gallery.dachunwang.top/img/20211117181048.png"></p><h2 id="等价类划分法"><a href="#等价类划分法" class="headerlink" title="等价类划分法"></a>等价类划分法</h2><blockquote><p>在所有测试数据中，具有某种共同特征的数据集合进行划分。</p><p>用于解决穷举问题</p></blockquote><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li>有效等价类：所有满足需求的数据集合，取一个即可。</li><li>无效等价类：所有不满足需求的数据集合，取一个即可。</li></ul><h3 id="设计用例步骤"><a href="#设计用例步骤" class="headerlink" title="设计用例步骤"></a>设计用例步骤</h3><ul><li>明确需求</li><li>确定有效和无效等价类</li><li>提取数据编写测试用例</li></ul><h3 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h3><blockquote><p>需求：验证 QQ 账号的合法性</p><p>要求：6 ~ 10 位自然数</p></blockquote><ul><li><p>明确需求</p><ul><li>6 - 10 位自然数</li></ul></li><li><p>确定有效和无效等价类</p><ul><li>有效：8 位自然数</li><li>无效：<ul><li>4 位自然数</li><li>8位非自然数</li></ul></li></ul></li><li><p>提取数据编写测试用例</p><ul><li><p>有效数据：</p><ul><li>12345678</li></ul></li><li><p>无效数据：</p><ul><li><p>1234</p></li><li><p>1234567a</p></li></ul></li></ul><blockquote><p><img src="https://gallery.dachunwang.top/img/20211118142651.png"></p></blockquote></li><li><p>用例执行</p><blockquote><p>提示：预期结果与实际结果不一致，为缺陷。</p><p><img src="https://gallery.dachunwang.top/img/20211118142608.png"></p></blockquote></li></ul><h3 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h3><blockquote><p>需求：验证某城市电话号码正确性</p><p>要求：</p><ul><li>区号：空或者是三位数字</li><li>前缀码：非 “0” 且非 “1” 开头的三位数字</li><li>后缀码：四位数字</li></ul></blockquote><ul><li><p>明确要求</p><ul><li>区号：空或者是三位数字</li><li>前缀码：非 “0” 且非 “1” 开头的三位数字</li><li>后缀码：四位数字</li></ul></li><li><p>确定有效和无效等价类</p><blockquote><p><img src="https://gallery.dachunwang.top/img/20211118113829.png"></p></blockquote></li><li><p>提取数据编写测试用例</p><blockquote><p>技巧：</p><ul><li>有效等价类数据覆盖组合</li><li>无效等价类数据不可组合</li></ul></blockquote><ul><li>有效数据：<ul><li>区号：空  前缀码：234  后缀码：1234</li><li>区号：123  前缀码：234  后缀码：1234</li></ul></li><li>无效数据：<ul><li>区号：1  前缀码：234  后缀码：1234</li><li>区号：空  前缀码：23  后缀码：1234</li><li>区号：空  前缀码：234  后缀码：123</li><li>区号：a12  前缀码：234  后缀码：1234</li><li>区号：空  前缀码：23a  后缀码：1234</li><li>区号：空  前缀码：234  后缀码：123a</li><li>区号：空  前缀码：012  后缀码：1234</li><li>区号：空  前缀码：123  后缀码：1234</li></ul></li></ul><blockquote><p><img src="https://gallery.dachunwang.top/img/20211118142247.png"></p></blockquote></li></ul><ul><li><p>用例执行</p><blockquote><p>提示：预期结果与实际结果不一致，为缺陷。</p><p><img src="https://gallery.dachunwang.top/img/20211118142209.png"></p></blockquote></li></ul><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ul><li>针对：需要有大量数据测试输入，但是没法穷举测试的地方。<ul><li>输入框</li><li>下拉列表</li><li>单选复选框</li></ul></li><li>典型代表：页面级的输入框类测试</li></ul><h2 id="边界值分析法"><a href="#边界值分析法" class="headerlink" title="边界值分析法"></a>边界值分析法</h2><blockquote><p>解决边界限制问题</p></blockquote><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul><li><p>选取正好等于、刚好大于、刚好小于边界的值作为测试数据【最多设计 7 条用例】</p><ul><li>上点：边界上的点（正好等于）</li><li>离点：距离上点最接近的点（刚好大于、刚好小于）</li><li>内点：范围内的点（区间范围内的数据）</li></ul><blockquote><p>示例：</p><p><img src="https://gallery.dachunwang.top/img/20211118140302.png"></p></blockquote></li></ul><h3 id="设计用例步骤-1"><a href="#设计用例步骤-1" class="headerlink" title="设计用例步骤"></a>设计用例步骤</h3><ul><li>明确需求</li><li>确定有效和无效等价类</li><li>确定边界范围值</li><li>提取数据编写测试用例</li></ul><h3 id="案例1-1"><a href="#案例1-1" class="headerlink" title="案例1"></a>案例1</h3><blockquote><p>需求：通过边界值法验证标题长度的合法性</p><p>要求：标题长度大于 0 ，小于等于 30 个字符</p></blockquote><ul><li><p>明确需求</p><ul><li>长度大于 0 个字符</li><li>长度小于等于 30 个字符</li></ul></li><li><p>确定有效和无效等价类</p><ul><li>有效：<ul><li>长度大于 0 小于 30 个字符</li></ul></li><li>无效：<ul><li>长度等于 0 个字符</li><li>长度大于 30 个字符</li></ul></li></ul></li><li><p>确定边界值范围</p><blockquote><ul><li>上点：0  30</li><li>离点：-1  1  29  31</li><li>内点：15</li></ul></blockquote><ul><li>有效：<ul><li>1</li><li>29</li><li>30</li></ul></li><li>无效<ul><li>0</li><li>31</li></ul></li></ul></li><li><p>提取数据编写测试用例</p><blockquote><p><img src="https://gallery.dachunwang.top/img/20211118143538.png"></p></blockquote></li></ul><h3 id="案例2-1"><a href="#案例2-1" class="headerlink" title="案例2"></a>案例2</h3><blockquote><p>需求：通过边界值法验证 QQ 号的合法性</p><p>要求：6 ~ 10 位自然数</p></blockquote><ul><li><p>明确需求</p><ul><li> 6 ~ 10 位自然数</li></ul></li><li><p>确定有效和无效等价类</p><ul><li>有效：<ul><li>大于等于 6 位自然数</li><li>小于等于 10 位自然数</li></ul></li><li>无效：<ul><li>小于 6 位自然数</li><li>大于 10 位自然数</li><li>非自然数</li></ul></li></ul></li><li><p>确定边界值范围</p><blockquote><ul><li>上点： 6  10</li><li>离点：5  7  9  11</li><li>内点：8</li></ul></blockquote><ul><li>有效：<ul><li>6 位自然数</li><li>7 位自然数</li><li>8 位自然数</li><li>9 位自然数</li><li>10 位自然数</li></ul></li><li>无效：<ul><li>5 位自然数</li><li>11 位自然数</li></ul></li></ul></li><li><p>提取数据编写测试用例</p><blockquote><p><img src="https://gallery.dachunwang.top/img/20211118145423.png"></p></blockquote></li><li><p>优化</p><blockquote><ul><li>结论：7 个优化为 5 个点</li><li>上点：必选（不考虑区间开闭）</li><li>内点：必选（建议选择中间范围）</li><li>离点：开内闭外（考虑开闭区间，开区间选择内部离点，闭区间选择外部离点）</li></ul><p><img src="https://gallery.dachunwang.top/img/20211118150608.png"></p></blockquote></li></ul><h3 id="适用场景-1"><a href="#适用场景-1" class="headerlink" title="适用场景"></a>适用场景</h3><ul><li>在等价类的基础上针对有边界范围的测试数据输入的地方（重点关注边界）</li><li>常见词语描述：大小、尺寸、重量、最大、最小、至多、至少等修饰词语</li><li>典型代表：有边界范围的输入框类测试</li></ul><blockquote><p>提示：边界值可以覆盖等价类的长度，但是无法覆盖类型。所以在设计用例时，必须两者结合。</p></blockquote><h2 id="判定表法"><a href="#判定表法" class="headerlink" title="判定表法"></a>判定表法</h2><blockquote><p>解决多条件组合依赖测试点覆盖问题</p></blockquote><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><ul><li>案例：验证 “若用户欠费或者关机，则不允许主被叫” 功能的测试</li><li>说明：<ul><li>等价类边界值分析法主要关注单个输入类条件的测试。</li><li>并未考虑输入条件之间的各种组合、输入条件与输出结果之间有相互制约关系的测试。</li></ul></li></ul><h3 id="定义及组成部分"><a href="#定义及组成部分" class="headerlink" title="定义及组成部分"></a>定义及组成部分</h3><ul><li><p>定义：是一种以表格形式表达多条件逻辑判断的工具</p></li><li><p>组成：</p><ul><li>条件桩：列出问题中的所有条件，列出条件的次序无关紧要。</li><li>动作桩：列出问题中可能采取的操作，操作的顺序没有约束。</li><li>条件项：列出条件对应的取值，所有可能情况下的真假值。</li><li>动作项：列出条件项的、各种取值情况下应该采取的动作结构。</li></ul><blockquote><p><img src="https://gallery.dachunwang.top/img/20211118152506.png"></p></blockquote></li><li><p>规则</p><ul><li>判定表中贯穿条件项和动作项的一列就是一条规则</li><li>假设有 n 个条件，每个条件的取值有两个（0,1），全组合有 2 的 n 次方种规则</li></ul></li></ul><h3 id="设计用例步骤-2"><a href="#设计用例步骤-2" class="headerlink" title="设计用例步骤"></a>设计用例步骤</h3><ul><li>明确需求</li><li>画出判定表<ul><li>列出条件桩和动作桩</li><li>填写条件项，对条件进行全组合</li><li>根据条件项的组合确定动作项</li><li>简化、合并想死规则（有相同的动作）</li></ul></li><li>根据规则编写测试用例</li></ul><h3 id="案例1-2"><a href="#案例1-2" class="headerlink" title="案例1"></a>案例1</h3><blockquote><p>订购单检查</p><ul><li>如果订单大于 500 元，又未过期，则发出批准单和提货单</li><li>如果金额大于 500 元，但过期了，则不发批准单和提货单</li><li>如果金额小于等于 500 元，则无论是否过期都发出批准单和提货单</li><li>在过期情况下不论金额大小都需要发出通知单</li></ul></blockquote><ul><li><p>明确需求</p><ul><li>如果订单大于 500 元，又未过期，则发出批准单和提货单</li><li>如果金额大于 500 元，但过期了，则不发批准单和提货单</li><li>如果金额小于等于 500 元，则无论是否过期都发出批准单和提货单</li><li>在过期情况下不论金额大小都需要发出通知单</li></ul></li></ul><ul><li><p>画出判定表</p><blockquote><p><img src="https://gallery.dachunwang.top/img/20211118181654.png"></p></blockquote></li><li><p>根据规则编写测试用例</p><blockquote><p><img src="https://gallery.dachunwang.top/img/20211118183246.png"></p></blockquote></li></ul><h3 id="案例2-2"><a href="#案例2-2" class="headerlink" title="案例2"></a>案例2</h3><blockquote><p>文件修改规则：</p><ul><li>输入的第一列字符必须是 A 或 B</li><li>第二列字符必须是一个数字</li><li>如果第一列字符不正确，则给出信息 L</li><li>如果第二列字符不正确，则给出信息 M</li><li>如果两列字符输入正确，则修改文件成功</li></ul></blockquote><ul><li><p>明确需求</p><ul><li>输入的第一列字符必须是 A 或 B</li><li>第二列字符必须是一个数字</li><li>如果第一列字符不正确，则给出信息 L</li><li>如果第二列字符不正确，则给出信息 M</li><li>如果两列字符输入正确，则修改文件成功</li></ul></li><li><p>画出判定表</p><blockquote><p><img src="https://gallery.dachunwang.top/img/20211118185946.png"></p></blockquote></li><li><p>根据规则编写测试用例</p><blockquote><p><img src="https://gallery.dachunwang.top/img/20211118185916.png"></p></blockquote></li><li><p>适用场景</p><ul><li><p>有多个输入条件，多个输出结果，输入条件之间有<strong>组合</strong>条件，输入条件和输出结果直接有依赖（制约）关系</p></li><li><p>判定表一般适用于条件组合数量较少的情况（比如 4 个条件以下）</p><blockquote><p>提示： 如果碰到项目中多条件组合大于4 个相互依赖，可以使用 <strong>正交表</strong>和<strong>因果图</strong>来实现</p></blockquote></li></ul></li></ul><h2 id="场景法"><a href="#场景法" class="headerlink" title="场景法"></a>场景法</h2><blockquote><p>场景法也可以叫流程图法，是用流程图描述用户的使用场景，然后通过覆盖流程路径来设计测试用例。</p><p>主要用来解决项目业务场景测试点覆盖问题</p></blockquote><h3 id="扩展：流程图"><a href="#扩展：流程图" class="headerlink" title="扩展：流程图"></a>扩展：流程图</h3><blockquote><p>使用标准图形和箭头来表达程序或业务的走向</p><p>提示：主要用来解决业务用例问题</p></blockquote><p><img src="https://gallery.dachunwang.top/img/20211118192127.png"></p><ul><li>流程图对测试人员有什么用？<ul><li>能够看懂流程图，设计业务用例</li><li>当需求文档信息不全时，能够根据需求，梳理出流程</li></ul></li><li>网页版工具：<a href="https://www.processon.com/">ProcessOn - 免费在线作图，思维导图，流程图，实时协作</a></li><li>Windows 工具：Visio</li></ul><h3 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h3><ul><li>用户使用角度：用户平时使用的不是单个功能，而是多个功能组合起来进行使用</li><li>测试人员角度：平时测试的都是单个功能点进行测试，容易忽略多个功能的组合测试</li></ul><h3 id="适用场景-2"><a href="#适用场景-2" class="headerlink" title="适用场景"></a>适用场景</h3><ul><li>根据实际的应用场景，来测试业务用力，可以使用场景法</li></ul><h3 id="案例1-3"><a href="#案例1-3" class="headerlink" title="案例1"></a>案例1</h3><blockquote><p>ATM 机取款流程</p><p><img src="https://gallery.dachunwang.top/img/20211118203136.png"></p><p><img src="https://gallery.dachunwang.top/img/20211118203206.png"></p></blockquote><ul><li><p>测试用例</p><blockquote><p><img src="https://gallery.dachunwang.top/img/20211118205534.png"></p></blockquote></li></ul><blockquote><p>提示：一般将成功的业务线进行冒烟测试</p></blockquote><h2 id="扩展-错误推荐法"><a href="#扩展-错误推荐法" class="headerlink" title="扩展-错误推荐法"></a>扩展-错误推荐法</h2><blockquote><p>通过<strong>经验</strong>推测系统可能出现的问题</p></blockquote><h3 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h3><ul><li>根据<strong>经验</strong>列举出可能出现问题的清单，根据清单分析问题可能的原因，推测发现缺陷</li></ul><h3 id="适用场景-3"><a href="#适用场景-3" class="headerlink" title="适用场景"></a>适用场景</h3><ul><li><strong>时间紧任务量大</strong>时，根据之前项目类似经验找出易出错的模块重点测试</li><li>时间宽裕通过该方法列出之前出现问题较多的模块再次测试</li></ul><h2 id="知识回顾-1"><a href="#知识回顾-1" class="headerlink" title="知识回顾"></a>知识回顾</h2><p><img src="https://gallery.dachunwang.top/img/20211118212746.png"></p><h2 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h2><blockquote><p>软件在使用过程中存在的任何<strong>问题</strong>都叫软件的缺陷，简称 bug 。</p></blockquote><h3 id="判定标准"><a href="#判定标准" class="headerlink" title="判定标准"></a>判定标准</h3><blockquote><p>衡量是否为缺陷的标准</p></blockquote><ul><li>软件未实现需求（规格）说明书中明确要求的功能 - <strong>少功能</strong></li><li>软件出现了需求（规格）说明书中指明不应该出现的错误 - <strong>功能错误</strong></li><li>软件实现的功能超出需求（规格）说明书指明的范围 - <strong>多功能</strong></li><li>软件未实现需求（规格）说明书中虽未明确指明但应该实现的要求 - <strong>隐形功能错误</strong></li><li>软件难以理解，不易使用，运行缓慢，用户体验不好 - <strong>不易使用</strong></li></ul><h3 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h3><ul><li>需求阶段 - 需求描述不易理解，有歧义，错误等。</li><li>设计阶段 - 设计文档存在错误或者缺陷</li><li>编码阶段 - 代码出现错误</li><li>运行阶段 - 软硬件系统本身故障导致软件缺陷</li></ul><blockquote><p>是软件就有缺陷。</p></blockquote><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p><img src="https://gallery.dachunwang.top/img/20211122154403.png"></p><h3 id="核心内容"><a href="#核心内容" class="headerlink" title="核心内容"></a>核心内容</h3><blockquote><p>描述缺陷使用</p></blockquote><ul><li>缺陷的标题 - 描述缺陷的核心问题</li><li>缺陷的预置条件 - 缺陷产生的前提</li><li>缺陷的复现步骤 - 复现缺陷的过程</li><li>缺陷的预期结果 - 希望得到的结果</li><li>缺陷的实际结果 - 实际得到的结果</li><li>缺陷的必要附件 - 图片、日志等信息（证据）</li></ul><blockquote><p>缺陷的必要附件可以为空</p></blockquote><h3 id="提交要素"><a href="#提交要素" class="headerlink" title="提交要素"></a>提交要素</h3><blockquote><p>通过缺陷管理工具与开发交流使用</p></blockquote><p><img src="https://gallery.dachunwang.top/img/20211122155752.png"></p><h3 id="缺陷类型"><a href="#缺陷类型" class="headerlink" title="缺陷类型"></a>缺陷类型</h3><ul><li>功能错误</li><li>界面（UI）错误</li><li>兼容性</li><li>数据</li><li>易用性</li><li>改进建议</li><li>架构</li></ul><blockquote><p> 面试题：你如何区分前端 bug 和 后端 bug ？</p><ul><li> 如果是界面或兼容性的错误为前端 bug</li><li>如果是功能错误区分前端和后端 bug ，需要抓包查看请求和响应</li></ul></blockquote><h3 id="缺陷编写"><a href="#缺陷编写" class="headerlink" title="缺陷编写"></a>缺陷编写</h3><ul><li><p>缺陷报告示例</p><blockquote><p><img src="https://gallery.dachunwang.top/img/20211122164104.png"></p><p>标题：操作数据描述 + 预期 + 实际</p></blockquote></li><li><p>跟踪流程</p><blockquote><p><img src="https://gallery.dachunwang.top/img/20211122164151.png"></p><p>面试题：发现 bug 后首先要怎么办？</p><p>​               确认 bug 可复现</p></blockquote></li><li><p>注意事项</p><ul><li>可复现 - 缺陷可以复现</li><li>唯一性 - 一个缺陷上报一个问题</li><li>规范性 - 符合公司或者项目要求</li></ul></li><li><p>编写规范</p><ul><li>准确 - 描述的信息是正确的</li><li>具体 - 有细节且是真实特定的</li><li>简洁易懂 - 描述简单容易理解</li><li>次序清晰 - 描述缺陷过程有条件，有先后顺序</li></ul></li></ul><h2 id="缺陷管理工具-禅道"><a href="#缺陷管理工具-禅道" class="headerlink" title="缺陷管理工具 - 禅道"></a>缺陷管理工具 - 禅道</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul><li><p>地址：<a href="https://www.zentao.net/">https://www.zentao.net/</a></p></li><li><p>特点</p><blockquote><p><img src="https://gallery.dachunwang.top/img/20211122165828.png"></p></blockquote></li></ul><ul><li><p>对测试人员作用</p><ul><li>缺陷管理【重点】</li><li>用例管理</li></ul></li><li><p>使用流程</p><blockquote><p><img src="https://gallery.dachunwang.top/img/20211122170526.png"></p></blockquote></li></ul><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><blockquote><p>要求：将以下缺陷通过禅道进行管理</p><p><img src="https://gallery.dachunwang.top/img/20211122164104.png"></p></blockquote><p><img src="https://gallery.dachunwang.top/img/20211122171825.png"></p><h2 id="知识回顾-2"><a href="#知识回顾-2" class="headerlink" title="知识回顾"></a>知识回顾</h2><p><img src="https://gallery.dachunwang.top/img/20211122180728.png"></p><h2 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…"></a>未完待续…</h2>]]></content>
    
    
    <categories>
      
      <category>软件测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件测试</tag>
      
      <tag>测试基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用 GitHub Actions 自动部署 Hexo 博客</title>
    <link href="/articles/hexo-auto-deploy/"/>
    <url>/articles/hexo-auto-deploy/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要记录如何利用 Github Actions 自动部署 Hexo 博客，并且部署完成后将生成的静态页面上传到 Github Pages 和 Coding 仓库。<span id="more"></span></p><h2 id="GitHub-Actions-是什么？"><a href="#GitHub-Actions-是什么？" class="headerlink" title="GitHub Actions 是什么？"></a>GitHub Actions 是什么？</h2><p>大家知道，持续集成由很多操作组成，比如抓取代码、运行测试、登录远程服务器，发布到第三方服务等等。GitHub 把这些操作就称为 actions。</p><p>很多操作在不同项目里面是类似的，完全可以共享。GitHub 注意到了这一点，想出了一个很妙的点子，允许开发者把每个操作写成独立的脚本文件，存放到代码仓库，使得其他开发者可以引用。</p><p>如果你需要某个 action，不必自己写复杂的脚本，直接引用他人写好的 action 即可，整个持续集成过程，就变成了一个 actions 的组合。这就是 GitHub Actions 最特别的地方。</p><p>GitHub 做了一个<a href="https://github.com/marketplace?type=actions">官方市场</a>，可以搜索到他人提交的 actions。另外，还有一个 <a href="https://github.com/sdras/awesome-actions">awesome actions</a> 的仓库，也可以找到不少 action。</p><p><img src="https://www.wangbase.com/blogimg/asset/201909/bg2019091105.jpg"></p><p>上面说了，每个 action 就是一个独立脚本，因此可以做成代码仓库，使用<code>userName/repoName</code>的语法引用 action。比如，<code>actions/setup-node</code>就表示<code>github.com/actions/setup-node</code>这个<a href="https://github.com/actions/setup-node">仓库</a>，它代表一个 action，作用是安装 Node.js。事实上，GitHub 官方的 actions 都放在 <a href="https://github.com/actions">github.com/actions</a> 里面。</p><p>既然 actions 是代码仓库，当然就有版本的概念，用户可以引用某个具体版本的 action。下面都是合法的 action 引用，用的就是 Git 的指针概念，详见<a href="https://help.github.com/en/articles/about-actions#versioning-your-action">官方文档</a>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs code"><br>actions/setup-node@74bc508 # 指向一个 commit<br>actions/setup-node@v1.0    # 指向一个标签<br>actions/setup-node@master  # 指向一个分支<br></code></pre></td></tr></table></figure><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>请参考文章<a href="https://blog.wainic.com/articles/hexo-blog/">Hexo 搭建个人博客</a></p><h2 id="创建-Github-仓库用于存放-Hexo-源文件"><a href="#创建-Github-仓库用于存放-Hexo-源文件" class="headerlink" title="创建 Github 仓库用于存放 Hexo 源文件"></a>创建 Github 仓库用于存放 Hexo 源文件</h2><p>点击 New 创建新仓库</p><p><img src="https://gallery.dachunwang.top/img/20211112132345.png"></p><p>仓库名称任取，设置成私有仓库，然后点击创建</p><p><img src="https://gallery.dachunwang.top/img/20211112132809.png"></p><p>创建完成</p><p><img src="https://gallery.dachunwang.top/img/20211112132841.png"></p><h2 id="将本地文件上传到远程仓库"><a href="#将本地文件上传到远程仓库" class="headerlink" title="将本地文件上传到远程仓库"></a>将本地文件上传到远程仓库</h2><p>在 Hexo 博客目录下使用 git 命令：<code>git init . </code>初始化一个本地仓库</p><p><img src="https://gallery.dachunwang.top/img/20211112133706.png"></p><p>使用 git 命令 :  <code>git remote add origin [仓库SSH地址]</code> 关联远程仓库</p><p><img src="https://gallery.dachunwang.top/img/20211112134038.png"></p><p>使用下面 git 命令将本地项目上传到 github 远程仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs git">git add .<br>git commot -m &quot;Update&quot;<br>git push -u origin master<br></code></pre></td></tr></table></figure><p><img src="https://gallery.dachunwang.top/img/20211112134455.png"></p><h2 id="构建自动部署"><a href="#构建自动部署" class="headerlink" title="构建自动部署"></a>构建自动部署</h2><h3 id="创建-yml-文件"><a href="#创建-yml-文件" class="headerlink" title="创建 .yml 文件"></a>创建 .yml 文件</h3><p>在 Hexo 目录下的 <code>.github</code> 目录下创建一个 <code>workflows</code> 目录 </p><p>在 workflows 目录创建一个 deploy_blog.yml 文件，文件内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">Blog</span> <span class="hljs-string">CI/CD</span><br><br><span class="hljs-comment"># 触发条件：在 push 到 master 分支后触发</span><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span> <br>      <span class="hljs-bullet">-</span> <span class="hljs-string">master</span><br><br><span class="hljs-attr">env:</span><br>  <span class="hljs-attr">TZ:</span> <span class="hljs-string">Asia/Shanghai</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">blog-cicd:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">Hexo</span> <span class="hljs-string">blog</span> <span class="hljs-string">build</span> <span class="hljs-string">&amp;</span> <span class="hljs-string">deploy</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span> <span class="hljs-comment"># 使用最新的 Ubuntu 系统作为编译部署的环境</span><br><br>    <span class="hljs-attr">steps:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span> <span class="hljs-string">codes</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">node</span><br>      <span class="hljs-comment"># 设置 node.js 环境</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v1</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">node-version:</span> <span class="hljs-string">&#x27;12.x&#x27;</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Cache</span> <span class="hljs-string">node</span> <span class="hljs-string">modules</span><br>      <span class="hljs-comment"># 设置包缓存目录，避免每次下载</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/cache@v1</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">~/.npm</span><br>        <span class="hljs-attr">key:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">runner.os</span> <span class="hljs-string">&#125;&#125;-node-$&#123;&#123;</span> <span class="hljs-string">hashFiles(&#x27;**/package-lock.json&#x27;)</span> <span class="hljs-string">&#125;&#125;</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">hexo</span> <span class="hljs-string">dependencies</span><br>      <span class="hljs-comment"># 下载 hexo-cli 脚手架及相关安装包</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        npm install -g hexo-cli</span><br><span class="hljs-string">        npm install</span><br><span class="hljs-string"></span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Generate</span> <span class="hljs-string">files</span><br>      <span class="hljs-comment"># 编译 markdown 文件</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        hexo clean</span><br><span class="hljs-string">        hexo generate</span><br><span class="hljs-string"></span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">hexo</span> <span class="hljs-string">blog</span><br>      <span class="hljs-attr">env:</span><br>        <span class="hljs-comment"># 设置时区</span><br>        <span class="hljs-attr">TZ:</span> <span class="hljs-string">Asia/Shanghai</span><br>        <span class="hljs-comment"># 在 https://mingwolf.coding.net/user/account/setting/tokens 新建秘钥</span><br>        <span class="hljs-attr">coding_token:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.coding_token</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-comment"># 团队中的某个人的用户名，一般默认是本人手机号码</span><br>        <span class="hljs-attr">coding_username:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.coding_USERNAME</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-comment"># 格式为：e.coding.net/组织名/项目名/仓库名.git</span><br>        <span class="hljs-attr">coding_ref:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.coding_REF</span> <span class="hljs-string">&#125;&#125;</span> <br>        <span class="hljs-comment"># Github 仓库</span><br>        <span class="hljs-attr">GITHUB_REPO:</span> <span class="hljs-string">github.com/oscar-yyc/oscar-yyc.github.io</span><br>      <span class="hljs-comment"># 将编译后的博客文件推送到指定仓库</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        cd ./public &amp;&amp; git init &amp;&amp; git add .</span><br><span class="hljs-string">        git config user.name &quot;oscar-yyc&quot;</span><br><span class="hljs-string">        git config user.email &quot;iloveyichen@aliyun.com&quot;</span><br><span class="hljs-string">        git add .</span><br><span class="hljs-string">        git commit -m &quot;GitHub Actions Auto Builder at $(date +&#x27;%Y-%m-%d %H:%M:%S&#x27;)&quot;</span><br><span class="hljs-string">        git push --force --quiet &quot;https://$&#123;&#123; secrets.access_tokens &#125;&#125;@$GITHUB_REPO&quot; master:master</span><br><span class="hljs-string">        git push --force --quiet &quot;https://$&#123;coding_username&#125;:$&#123;coding_token&#125;@$&#123;coding_ref&#125;&quot; master:master</span><br></code></pre></td></tr></table></figure><h3 id="TCB-上传"><a href="#TCB-上传" class="headerlink" title="TCB 上传"></a>TCB 上传</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">static</span> <span class="hljs-string">to</span> <span class="hljs-string">Tencent</span> <span class="hljs-string">CloudBase</span><br>        <span class="hljs-attr">id:</span> <span class="hljs-string">deployStatic</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">TencentCloudBase/cloudbase-action@v1.1.1</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">secretId:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.SECRET_ID</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">secretKey:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.SECRET_KEY</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">envId:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.ENV_ID</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">staticSrcPath:</span> <span class="hljs-string">public</span><br></code></pre></td></tr></table></figure><h3 id="将-Hexo-源文件备份到-Coding-仓库-backup-分支"><a href="#将-Hexo-源文件备份到-Coding-仓库-backup-分支" class="headerlink" title="将 Hexo 源文件备份到 Coding 仓库 backup 分支"></a>将 Hexo 源文件备份到 Coding 仓库 backup 分支</h3><p>backup_to_coding.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">Auto</span> <span class="hljs-string">backup</span> <span class="hljs-string">to</span> <span class="hljs-string">coding</span><br><br><span class="hljs-comment"># 在push主分支时触发构建</span><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;master&#x27;</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-comment"># job的名字：推送到coding</span><br>  <span class="hljs-attr">deploy:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">to</span> <span class="hljs-string">Coding</span><br>    <span class="hljs-comment"># job的运行平台</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-18.04</span><br>    <span class="hljs-comment"># test任务的步骤</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-comment"># 使用别人写好的指定版本的actions脚本，名称是checkout，下载本仓库</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">设置提交者的个人信息</span><br>        <span class="hljs-comment"># 这三个变量的值都放在 https://github.com/oscar-yyc/HexoSource/settings/secrets</span><br>        <span class="hljs-attr">env:</span><br>          <span class="hljs-comment"># 设置时区</span><br>          <span class="hljs-attr">TZ:</span> <span class="hljs-string">Asia/Shanghai</span><br>          <span class="hljs-comment"># 在 https://mingwolf.coding.net/user/account/setting/tokens 新建秘钥</span><br>          <span class="hljs-attr">coding_token:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.coding_token</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-comment"># 团队中的某个人的用户名，一般默认是本人手机号码</span><br>          <span class="hljs-attr">coding_username:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.coding_USERNAME</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-comment"># 格式为：e.coding.net/组织名/项目名/仓库名.git</span><br>          <span class="hljs-attr">coding_ref:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.coding_REF</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          export message=$(git log --pretty=format:&quot;%s&quot; -1)</span><br><span class="hljs-string">          [ -f CNAME ] &amp;&amp; rm CNAME || echo &quot;CNAME doesn&#x27;t exist&quot;</span><br><span class="hljs-string">          rm -rf .github</span><br><span class="hljs-string">          rm -rf .git</span><br><span class="hljs-string">          git clone https://$&#123;coding_username&#125;:$&#123;coding_token&#125;@$&#123;coding_ref&#125; coding_dir</span><br><span class="hljs-string">          cd coding_dir &amp;&amp; mv .git ../ &amp;&amp; cd ../ &amp;&amp; rm -rf coding_dir</span><br><span class="hljs-string">          git config --local user.email &quot;iloveyichen&quot;</span><br><span class="hljs-string">          git config --local user.name &quot;oscar-yyc&quot;</span><br><span class="hljs-string">          git config core.filemode false</span><br><span class="hljs-string">          git remote set-url origin https://$&#123;coding_ref&#125;</span><br><span class="hljs-string">          git add .</span><br><span class="hljs-string">          git commit -m &quot;$message&quot;</span><br><span class="hljs-string">          git push --force --quiet &quot;https://$&#123;coding_username&#125;:$&#123;coding_token&#125;@$&#123;coding_ref&#125;&quot; master:backup</span><br></code></pre></td></tr></table></figure><h3 id="设置仓库-Actions-secrets"><a href="#设置仓库-Actions-secrets" class="headerlink" title="设置仓库 Actions secrets"></a>设置仓库 Actions secrets</h3><p><a href="https://github.com/settings/tokens">点击这里</a> 选择 Personal access tokens 进行创建 </p><p><img src="https://gallery.dachunwang.top/img/20211112135824.png"></p><p>按照下图设置好，点击 Generate token </p><p><img src="https://gallery.dachunwang.top/img/20211112135951.png"></p><p>点击复制</p><p><img src="https://gallery.dachunwang.top/img/20211112140034.png"></p><p>找到刚刚创建好的仓库 点击 Settings –&gt; Secrets –&gt; New repository secret 创建一个 Secrets</p><p><img src="https://gallery.dachunwang.top/img/20211112140501.png"></p><p>先将刚刚复制的 token 粘贴到 Value 里面，然后 Name 处填写 access_tokens ,最后点击添加</p><p><img src="https://gallery.dachunwang.top/img/20211112141214.png"></p><p>接下来还要创建 3 个 Secret</p><p>名称如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">coding_token</span> <span class="hljs-comment"># 在 https://mingwolf.coding.net/user/account/setting/tokens 新建秘钥</span><br><br><span class="hljs-string">coding_USERNAME</span> <span class="hljs-comment"># 团队中的某个人的用户名，一般默认是本人手机号码</span><br><br><span class="hljs-string">coding_REF</span> <span class="hljs-comment"># 格式为：e.coding.net/组织名/项目名/仓库名.git</span><br></code></pre></td></tr></table></figure><p><img src="https://gallery.dachunwang.top/img/20211112150621.png"></p><h2 id="开始自动部署"><a href="#开始自动部署" class="headerlink" title="开始自动部署"></a>开始自动部署</h2><div class="note note-success">            <p>由于每次自动部署会删除掉 Github Pages 里的 CNAME 文件，所以自动部署前请将 CNAME 文件复制到 Hexo 博客目录下的 Source 文件夹</p>          </div><p>在 Hexo 博客目录使用以下 git 命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs git">git add .<br>git commit -m &quot;Update&quot;<br>git push<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html">GitHub Actions 入门教程 - 阮一峰的网络日志</a></p><p><a href="https://blog.csdn.net/vir_lee/article/details/80464408">git学习-如何将本地项目上传（同步）到github远程仓库</a></p><p><a href="https://zhuanlan.zhihu.com/p/161969042">使用 GitHub Actions 自动部署 Hexo 博客到 GitHub Pages </a></p><p><a href="https://www.cnblogs.com/zfb132/p/14264404.html">为Github仓库添加Github Actions实现持续集成: Android apk自动编译发布以及github pages同步推送coding.net</a></p>]]></content>
    
    
    <categories>
      
      <category>网站部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>GitHubActions</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>将 Hexo 博客部署到腾讯云开发静态网站托管</title>
    <link href="/articles/hexo-deploy-cloudbase/"/>
    <url>/articles/hexo-deploy-cloudbase/</url>
    
    <content type="html"><![CDATA[<h2 id="Hexo-是什么？"><a href="#Hexo-是什么？" class="headerlink" title="Hexo 是什么？"></a>Hexo 是什么？</h2><p>Hexo 是一个快速、简洁且高效的博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在其他平台上，是搭建博客的首选框架。<span id="more"></span>除了在 Github Pages 部署以外，现在你有了一个新的选择，那就是使用云开发静态网站功能来部署啦！</p><h2 id="了解云开发静态网站托管"><a href="#了解云开发静态网站托管" class="headerlink" title="了解云开发静态网站托管"></a>了解云开发静态网站托管</h2><p>静态网站托管（Website Hosting，WH）是由云开发提供的便捷、稳定、高拓展性的托管服务，<strong>您无需自建服务器，即可一键部署网站应用，将静态网站发布到全网节点，轻松为您的业务增添稳定、高并发、快速访问等能力。</strong>此外，您还可以结合云开发的云函数、数据库等能力，将静态网站扩展为带有后台服务端的全栈网站，让您可极速提供网站应用。无论是腾讯云·云开发用户，还是小程序·云开发用户，只要开通按量付费，即可享有云开发静态网站托管服务。</p><p>相比于自建的网站托管，云开发静态网站托管可以实现一键上传，让网站托管变得更加简单；还提供了自动化的 <a href="https://cloud.tencent.com/product/symantecssl?from=10680">SSL 证书</a>接入，让开发者免于手动申请 SSL 证书，简单几步， 保障<a href="https://cloud.tencent.com/product/bri?from=10680">业务安全</a>；不仅如此，云开发静态网站托管还提供了全网的 <a href="https://cloud.tencent.com/product/cdn?from=10680">CDN 加速</a>服务，让开发者的网站在任何时候，都能访问飞快。你完全可以用来部署个人博客、创意H5、企业官网等应用。</p><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>请参考文章<a href="https://wainic.com/articles/hexo-blog/">Hexo 搭建个人博客</a></p><h2 id="创建云开发环境"><a href="#创建云开发环境" class="headerlink" title="创建云开发环境"></a>创建云开发环境</h2><p>完成了本地的 Hexo 建设，接下来我们来创建一个云开发环境，用来部署 Hexo 。进入到<a href="https://console.cloud.tencent.com/tcb/env/index">云开发的管理控制台</a>，点击新建环境，新建一个环境来进行部署</p><p><img src="https://gallery.dachunwang.top/img/20211110120314.png"></p><p>选择空白模板，然后点击下一步</p><p><img src="https://gallery.dachunwang.top/img/20211110120425.png"></p><p>地域选择离自己位置比较近的，计费方式选择按量计费，环境名称任意取就好，然后勾选同意计费规则，最后点击下一步</p><p><img src="https://gallery.dachunwang.top/img/20211110120615.png"></p><p>点击立即开通，环境就创建好了</p><p><img src="https://gallery.dachunwang.top/img/20211110120828.png"></p><p>记住这个环境 ID 接下来会用到</p><p><img src="https://gallery.dachunwang.top/img/20211110133625.png"></p><h2 id="安装云开发-cli-工具"><a href="#安装云开发-cli-工具" class="headerlink" title="安装云开发 cli 工具"></a>安装云开发 cli 工具</h2><p>使用下列命令安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs code">yarn global add @cloudbase/cli@beta<br></code></pre></td></tr></table></figure><h2 id="初始化云开发-Cli"><a href="#初始化云开发-Cli" class="headerlink" title="初始化云开发 Cli"></a>初始化云开发 Cli</h2><p>完成了云开发环境的配置后， 需要初始化一下云开发 cli ，从而实现借助 cli 来上传页面<br>在命令行输入如下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs code">tcb login<br></code></pre></td></tr></table></figure><p>会提醒需要在网页中授权<br>在弹出的页面确认授权</p><p><img src="https://gallery.dachunwang.top/img/20211110134316.png"></p><p>确认授权后，会看到控制台输出相应的命令<br>这样，云开发 cli 就初始化好了。 接下来，就可以进入到最后一个环节，上传部署 Hexo 了。</p><h2 id="构建-Hexo-并上传"><a href="#构建-Hexo-并上传" class="headerlink" title="构建 Hexo 并上传"></a>构建 Hexo 并上传</h2><p>回到 Hexo 目录中，执行 Hexo g 来生成文件，Hexo 会默认将文件生成在 Public 目录下。</p><p><img src="https://gallery.dachunwang.top/img/20211110134343.png"></p><p>文件生成完成后，可以执行如下命令来进行部署（需要将 EnvID 替换为前面记下的环境ID）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs code">cd public<br>tcb hosting deploy ./ -e EnvId<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://cloud.tencent.com/developer/article/1671013">如何将 Hexo 博客部署到云开发静态网站托管 - 云+社区 - 腾讯云 </a></p><p><a href="https://cloud.tencent.com/document/product/876/41539">云开发 CloudBase CLI 使用指南 - 文档中心 - 腾讯云</a></p>]]></content>
    
    
    <categories>
      
      <category>网站部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 搭建个人博客</title>
    <link href="/articles/hexo-blog/"/>
    <url>/articles/hexo-blog/</url>
    
    <content type="html"><![CDATA[<h2 id="Hexo-是什么？"><a href="#Hexo-是什么？" class="headerlink" title="Hexo 是什么？"></a>Hexo 是什么？</h2><p>Hexo 是一个快速、简洁且高效的博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在其他平台上，是搭建博客的首选框架。<span id="more"></span>除了在 Github Pages 部署以外，现在你有了一个新的选择，那就是使用云开发静态网站功能来部署啦！</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="安装-Node-js-npm-yarn"><a href="#安装-Node-js-npm-yarn" class="headerlink" title="安装 Node.js npm yarn"></a>安装 Node.js npm yarn</h3><p>对于 Windows，安装 Node.js 会一起安装 npm，yarn 可以通过 npm 安装也可以直接下载 yarn 的安装程序，安装过程如下：</p><blockquote><p>安装 Node.js，建议 LTS 版，🔗 <a href="https://nodejs.org/en/download/">官方下载</a></p></blockquote><p><img src="https://gallery.dachunwang.top/img/20211110104341.webp"></p><blockquote><p>安装 Git，🔗 <a href="https://git-scm.com/">官方下载</a></p></blockquote><p>下载后直接一路 <code>Next</code> 安装即可</p><blockquote><p>安装 yarn，🔗 <a href="https://classic.yarnpkg.com/latest.msi">官方下载</a></p></blockquote><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><h3 id="全局安装-Hexo"><a href="#全局安装-Hexo" class="headerlink" title="全局安装 Hexo"></a>全局安装 Hexo</h3><p>打开系统  Windows PowerShell / 命令提示符，全局安装 Hexo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs code">yarn global add hexo-cli<br></code></pre></td></tr></table></figure><p>现在我们的 Hexo 已经在本地计算机安装好了，下面我们从自己的第一个 Blog 开始</p><h3 id="初始化博客"><a href="#初始化博客" class="headerlink" title="初始化博客"></a>初始化博客</h3><p>创建一个用于存放 Hexo 博客文件的目录，在当前目录下打开 Windows PowerShell / 命令提示符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs code"># 初始化一个 Hexo 目录<br>$ hexo init<br># 安装依赖<br>$ yarn install<br></code></pre></td></tr></table></figure><p>此时 Blog 目录的结构如下所示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs code">.<br>├── .GitHub <br>├── node_modules   # Hexo 所需依赖<br>├── _config.yml    # Hexo 全局配置文件<br>├── package.json   # npm软件包及版本信息<br>├── scaffolds      # 模版文件夹<br>|   ├── draft.md   # 草稿模板<br>|   ├── page.md    # 页面模板<br>|   └── post.md    # 文章模板<br>├── source         # 资源文件夹<br>|   ├── _drafts    # 草稿文件夹<br>|   └── _posts     # 文章文件夹<br>├── .gitignore     # Git 忽略文件信息<br>├── _config.[主题名].yml # 主题的配置文件<br>└── themes         # 主题文件夹<br></code></pre></td></tr></table></figure><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p><img src="https://gallery.dachunwang.top/img/20211110142925.png"></p><h3 id="1-安装主题"><a href="#1-安装主题" class="headerlink" title="1. 安装主题"></a>1. 安装主题</h3><p>下载 <a href="https://github.com/fluid-dev/hexo-theme-fluid/releases">最新 release 版本</a> 解压到 themes 目录，并将解压出的文件夹重命名为 <code>fluid</code>。</p><h3 id="2-指定主题"><a href="#2-指定主题" class="headerlink" title="2. 指定主题"></a>2. 指定主题</h3><p>如下修改 Hexo 博客目录中的 <code>_config.yml</code>：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">theme:</span> fluid  <span class="hljs-meta"># 指定主题</span><br><br><span class="hljs-symbol">language:</span> <span class="hljs-built_in">zh</span>-CN  <span class="hljs-meta"># 指定语言，会影响主题显示的语言，按需修改</span><br></code></pre></td></tr></table></figure><h3 id="3-创建「关于页」"><a href="#3-创建「关于页」" class="headerlink" title="3. 创建「关于页」"></a>3. 创建「关于页」</h3><p>首次使用主题的「关于页」需要手动创建：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> about<br></code></pre></td></tr></table></figure><p>创建成功后，编辑博客目录下 <code>/source/about/index.md</code>，添加 <code>layout</code> 属性。</p><p>修改后的文件示例如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">about</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2020-02-23 19:20:33</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">about</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">这里写关于页的正文，支持</span> <span class="hljs-string">Markdown,</span> <span class="hljs-string">HTML</span><br></code></pre></td></tr></table></figure><h3 id="4-主题配置"><a href="#4-主题配置" class="headerlink" title="4.主题配置"></a>4.主题配置</h3><p>覆盖配置</p><div class="note note-success">            <p>TIP<br>覆盖配置可以使<strong>主题配置</strong>放置在 fluid 目录之外，避免在更新主题时丢失自定义的配置。<br>通过 Npm 安装主题的用户可忽略，其他用户建议学习使用。</p>          </div><p>Hexo 5.0.0 版本以上的用户，在博客目录下创建 <code>_config.fluid.yml</code> 文件，将主题的 <a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">_config.yml</a> 内容复制过去。</p><p><a href="http://yun.dachunwang.top/files/_config.fluid.yml">当前博客配置文件备份</a></p><p>以后如果修改任何主题配置，都只需修改 <code>_config.fluid.yml</code> 的配置即可。</p><p>注意：</p><ul><li>只要存在于 <code>_config.fluid.yml</code> 的配置都是高优先级，修改原 <code>_config.yml</code> 是无效的。</li><li>每次更新主题可能存在配置变更，请注意更新说明，可能需要手动对 <code>_config.fluid.yml</code> 同步修改。</li><li>想查看覆盖配置有没有生效，可以通过 <code>hexo g --debug</code> 查看命令行输出。</li><li>如果想将某些配置覆盖为空，注意不要把主键删掉，不然是无法覆盖的，比如：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">about:</span><br>  <span class="hljs-attr">icons:</span>  <span class="hljs-comment"># 不要把 icon 注释掉，否则无法覆盖配置</span><br>    <span class="hljs-comment"># - &#123; class: &#x27;iconfont icon-github-fill&#x27;, link: &#x27;https://github.com&#x27; &#125;</span><br>    <span class="hljs-comment"># - &#123; class: &#x27;iconfont icon-wechat-fill&#x27;, qrcode: &#x27;/img/favicon.png&#x27; &#125;</span><br></code></pre></td></tr></table></figure><p>主题更多配置<a href="https://hexo.fluid-dev.com/docs/guide/">参照这里</a>。</p><h3 id="5-文章配置"><a href="#5-文章配置" class="headerlink" title="5.文章配置"></a>5.文章配置</h3><p>文章配置<a href="https://hexo.io/zh-cn/docs/front-matter">参照这里</a></p><p>样式预览<a href="https://hexo.fluid-dev.com/posts/hello-fluid/">参照这里</a></p><h3 id="6-更新主题"><a href="#6-更新主题" class="headerlink" title="6. 更新主题"></a>6. 更新主题</h3><p>更新主题的方式<a href="https://hexo.fluid-dev.com/docs/start/#%E6%9B%B4%E6%96%B0%E4%B8%BB%E9%A2%98">参照这里</a>。</p><h2 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h2><p>使用命令  <code>hexo -s -p [端口号]</code> 启动本地预览，默认端口号为 <code>4000</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs code"># 以默认端口启动本地预览<br>$ hexo s<br># 此时本地预览的网址为 http://localhost:4000<br><br># 以自定义端口启动本地预览，比如 250<br>$ hexo s -p 250<br># 此时本地预览的网址为 http://localhost:250<br></code></pre></td></tr></table></figure><p>退出使用 <code>Ctrl + C</code></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.dejavu.moe/posts/hexo-blog/">Hexo 搭建个人博客教程 - Dejavu’s Blog</a></p>]]></content>
    
    
    <categories>
      
      <category>网站部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
